

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user_type"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
  user_type TEXT;
BEGIN
  user_type := 'doctor';

  IF user_type = 'doctor' THEN
    INSERT INTO public.doctors (
      id,
      name
    )
    VALUES (
      NEW.id,
      NEW.email
    );
  ELSIF user_type = 'city' THEN
    INSERT INTO public.cities (
      id,
      name
    )
    VALUES (
      NEW.id,
      NEW.email
    );
  ELSE
    RAISE WARNING 'Unknown user_type for new user %: %', NEW.id, user_type;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_new_user_type"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."cities" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL
);


ALTER TABLE "public"."cities" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."doctors" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying,
    "id_holidays_offers" bigint
);


ALTER TABLE "public"."doctors" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."holidays_offers" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "address" character varying NOT NULL,
    "postal_code" character varying NOT NULL,
    "description" character varying NOT NULL,
    "max_people" integer NOT NULL,
    "rooms" integer,
    "host_type" character varying NOT NULL,
    "equipments" character varying,
    "id" bigint NOT NULL,
    "id_cities" "uuid"
);


ALTER TABLE "public"."holidays_offers" OWNER TO "postgres";


ALTER TABLE "public"."holidays_offers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."holidays_offers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."offers_availability" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "date" NOT NULL,
    "max_people" integer NOT NULL,
    "available" boolean DEFAULT true NOT NULL,
    "id_holidays_offers" bigint NOT NULL
);


ALTER TABLE "public"."offers_availability" OWNER TO "postgres";


ALTER TABLE "public"."offers_availability" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."offers_availability_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."offers_bookings" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "people" integer NOT NULL,
    "status" character varying DEFAULT 'Brouillon'::character varying,
    "id_doctors" "uuid" NOT NULL,
    "id_cities" "uuid" NOT NULL
);


ALTER TABLE "public"."offers_bookings" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."test" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL
);


ALTER TABLE "public"."test" OWNER TO "postgres";


ALTER TABLE "public"."test" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."cities"
    ADD CONSTRAINT "cities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."holidays_offers"
    ADD CONSTRAINT "holidays_offers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."offers_availability"
    ADD CONSTRAINT "offers_availability_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."offers_bookings"
    ADD CONSTRAINT "offers_bookings_pkey" PRIMARY KEY ("id_doctors", "id_cities");



ALTER TABLE ONLY "public"."doctors"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."cities"
    ADD CONSTRAINT "cities_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."doctors"
    ADD CONSTRAINT "doctors_id_holidays_offers_fkey" FOREIGN KEY ("id_holidays_offers") REFERENCES "public"."holidays_offers"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."holidays_offers"
    ADD CONSTRAINT "holidays_offers_id_cities_fkey" FOREIGN KEY ("id_cities") REFERENCES "public"."cities"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."offers_availability"
    ADD CONSTRAINT "offers_availability_id_holidays_offers_fkey" FOREIGN KEY ("id_holidays_offers") REFERENCES "public"."holidays_offers"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."offers_bookings"
    ADD CONSTRAINT "offers_bookings_id_cities_fkey" FOREIGN KEY ("id_cities") REFERENCES "public"."cities"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."offers_bookings"
    ADD CONSTRAINT "offers_bookings_id_doctors_fkey" FOREIGN KEY ("id_doctors") REFERENCES "public"."doctors"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."doctors"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable access for all users" ON "public"."cities" USING (true);



CREATE POLICY "Enable access for all users" ON "public"."holidays_offers" USING (true);



CREATE POLICY "Enable access for all users" ON "public"."offers_availability" USING (true);



CREATE POLICY "Enable access for all users" ON "public"."offers_bookings" USING (true);



CREATE POLICY "Enable access for all users" ON "public"."test" USING (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."test" FOR INSERT TO "authenticated" WITH CHECK (true);



ALTER TABLE "public"."cities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."doctors" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."holidays_offers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."offers_availability" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."offers_bookings" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."test" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."handle_new_user_type"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user_type"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user_type"() TO "service_role";


















GRANT ALL ON TABLE "public"."cities" TO "anon";
GRANT ALL ON TABLE "public"."cities" TO "authenticated";
GRANT ALL ON TABLE "public"."cities" TO "service_role";



GRANT ALL ON TABLE "public"."doctors" TO "anon";
GRANT ALL ON TABLE "public"."doctors" TO "authenticated";
GRANT ALL ON TABLE "public"."doctors" TO "service_role";



GRANT ALL ON TABLE "public"."holidays_offers" TO "anon";
GRANT ALL ON TABLE "public"."holidays_offers" TO "authenticated";
GRANT ALL ON TABLE "public"."holidays_offers" TO "service_role";



GRANT ALL ON SEQUENCE "public"."holidays_offers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."holidays_offers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."holidays_offers_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."offers_availability" TO "anon";
GRANT ALL ON TABLE "public"."offers_availability" TO "authenticated";
GRANT ALL ON TABLE "public"."offers_availability" TO "service_role";



GRANT ALL ON SEQUENCE "public"."offers_availability_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."offers_availability_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."offers_availability_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."offers_bookings" TO "anon";
GRANT ALL ON TABLE "public"."offers_bookings" TO "authenticated";
GRANT ALL ON TABLE "public"."offers_bookings" TO "service_role";



GRANT ALL ON TABLE "public"."test" TO "anon";
GRANT ALL ON TABLE "public"."test" TO "authenticated";
GRANT ALL ON TABLE "public"."test" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
